================================================================================
				第六章   复杂结构
第一节 结构体

详情见  struct.c

    struct person {
	char name[20];
	int age;
	char gender;
	float height;
    };
 一共存有 20 +　４　＋　４　＋　４　＝　３２字节

　　　　struct node1 {
    	char a;
	char b;
	int c;
    };
　一共存有4 + 0 + 4 = 8字节

　　　　struct node2 {
	char a;
	int c;
	char b;
    };
  一共存有４　＋　４　＋ 4 = 12字节

综上所述，存储空间花费小的变量在结构体中优先定义。

第二节 共用体

共用体的ip应用   struct2.c
综合练习        union.c

  union register {
     struct {
         unsigned char b1;
         unsigned char b2;
         unsigned char b3;
         unsigned char b4;
         unsigned char reserved;
     } bits;
     unsigned char byte;
  };
 开辟连续的4字节空间

  union node {
      double a;
      char b;
      int c;
  };
 double占据8个字节，共用体一共占用8个字节，相对结构体更加节省空间

 

================================================================================
================================================================================
				第七章   指针
指针存储地址，
int a;
 a = 5;
&a = 0x187C20 0x187C21 0x187C22 0x187C23  取地址，取整型变量a的地址
int *p = &a;
 p = 0x187C20;
&p = 0x276B30 0x276B31 0x276B32 0x276B33  
*p == a == 5;
*p 为取解析，即p所存地址中存储的值。

指针变量在2^n位系统中固定占n字节，如64位系统固定占8字节。

->间接引用
. 直接引用

struct date {
    int x, y;
};

int main(){
    struct date a[2] = {0, 1, 2, 3}, *p = a;
    a[1].x;
    (p + 1)->x;
    (*(a + 1)).x;
    (*(p + 1)).x;
    (a + 1)->x;
    (&a[0] + 1)->x;
    (*(&a[0] + 1)).x;
    (&a[1])->x;
    p[1].x;
    (&p[1])->x;
地址 -> 间接引用，指针 . 直接引用
} ================================================================================
